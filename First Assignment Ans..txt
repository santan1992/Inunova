Q1. Why do we call Python as a general purpose and high-level programming language?
Ans.Python is called a general-purpose and high-level programming language because it is versatile and can be used for a wide range of applications,
    and it abstracts low-level details, making it easy to read and write, suitable for various tasks, and accessible to developers of different backgrounds.
Q2. Why is Python called a dynamically typed language?
Ans.Python is called a dynamically typed language because it determines variable types at runtime, 
    allowing for flexibility without requiring explicit type declarations.
    x = 5      # x is an integer
    x = "John" # x is now a string
Q3. List some pros and cons of Python programming language?
Ans.Pros:
    1. Readability and ease of learning.
    2. Versatile and suitable for various applications.
    3. Large standard library and active community.
    4. Cross-platform compatibility.
    5. Productivity and rapid development.
    Cons:
    1. Slower performance compared to compiled languages.
    2. Global Interpreter Lock (GIL) limitation.
    3. Limited for mobile app development.
    4. Less suitable for low-level system programming.
    5. Dynamic typing can lead to runtime errors.
Q4. In what all domains can we use Python?
Ans.Python can be used in domains such as 
    web development, data analysis, 
    machine learning, scientific computing, 
    game development, desktop applications, 
    automation, IoT, blockchain, robotics, web scraping,
    NLP, bioinformatics, finance, education, and more.
Q5. What are variable and how can we declare them?
Ans.A variable in programming is a symbolic name for storing data. 
    In Python, you declare a variable by assigning a name to a value, 
    and its data type is determined automatically based on the assigned value.
    name = "John"  # A string variable
    age = 30       # An integer variable
    price = 19.99  # A floating-point variable
    is_student = True  # A boolean variable
Q6. How can we take an input from the user in Python?
Ans.To take user input in Python, use the `input()` function, like this:
    user_input = input("Prompt message: ")
    The user's input is collected as a string and can be stored in a variable.
Q7. What is the default datatype of the value that has been taken as an input using input() function?
Ans.The input() function in Python always returns the user's input as a string by default. 
    Regardless of what the user enters (numbers, text, or special characters), it's treated as a string data type. 
    If you need to work with numerical values, you should explicitly convert the input to the appropriate 
    data type (e.g., int or float) using type conversion functions like `int()` or `float()`.
Q8. What is type casting?
Ans.Type casting, or type conversion, is the process of changing 
    the data type of a value in a programming language to make it compatible with specific operations or requirements.
Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
Ans.Yes, you can take multiple inputs from the user using a single 
   `input()` function by having them separated by a delimiter (e.g., space) and then splitting the input string to access individual values.
    # Taking multiple inputs separated by spaces
    user_input = input("Enter multiple values separated by spaces: ")
    values = user_input.split()
    # Processing the values
    for value in values:
    print("You entered:", value)
Q10.What are keywords?
Ans.Keywords, or reserved words, are special words in a programming language with predefined meanings. 
    They cannot be used for naming variables, functions, or other identifiers and play a crucial role in defining program structure and logic.
    for example, keywords include words like if, else, for, while, def, class, import, and many others.
Q11. Can we use keywords as a variable? Support your answer with reason.
Ans.No, you cannot use keywords as variables in a programming language. For example, 
    in Python, using a keyword like `if` as a variable name is not allowed and will result in a syntax error. 
    Keywords have predefined meanings and are reserved for specific purposes within the language.
Q12.What is indentation? What's the use of indentaion in Python?
Ans.Python is the use of spaces or tabs at the beginning of a line to indicate the level of nesting within a block of code.
    It is crucial for defining code structure, readability, and scope in Python.
    if x > 5:
    # This block is indented
    print("x is greater than 5")
    else:
    # This block is also indented
    print("x is not greater than 5")
Q13.How can we throw some output in Python?
Ans.In Python, you can produce output using the `print()` function. It takes one or more arguments and displays them as output on the screen.
    # Display a string
    print("Hello, World!")
    # Display a variable's value
    name = "Alice"
    print("Hello, " + name)
    # Display multiple values
    x = 5
    y = 10
    print("The sum of", x, "and", y, "is", x + y)
    # Display the result of an expression
    result = 3 * 7
    print("The result is:", result)
Q14. What are operators in Python?
Ans.**Operators** in Python are symbols or keywords that perform operations on data. For example:

- **Arithmetic Operators**: Perform mathematical operations like addition, subtraction, etc.
  ```python
  x = 5 + 3  # Adds 5 and 3, result is 8
  ```

- **Comparison Operators**: Compare values and return True or False.
  ```python
  is_equal = (x == 8)  # Compares x to 8, result is True
  ```

- **Logical Operators**: Combine or modify conditions.
  ```python
  is_true = True
  is_false = not is_true  # Negates is_true, result is False
  ```

- **Assignment Operators**: Assign values to variables.
  ```python
  y = 10
  y += 5  # Adds 5 to y, result is 15
  ```

- **Membership Operators**: Test if a value is in a sequence.
  ```python
  fruits = ['apple', 'banana', 'cherry']
  has_apple = 'apple' in fruits  # Checks if 'apple' is in fruits, result is True
  ```

- **Identity Operators**: Compare the memory addresses of objects.
  ```python
  a = [1, 2, 3]
  b = a
  are_same = (a is b)  # Checks if a and b reference the same object, result is True
  ```

Operators are fundamental for performing various tasks in Python, from basic arithmetic to complex logic and data manipulation.
Q15.What is difference between / and // operators?
Ans.The `/` and `//` operators in Python are both used for division, but they behave differently:

1. **`/` (Division Operator):** This operator performs standard division and returns a floating-point result. It gives you the exact quotient, including any decimal places.

   ```python
   result = 7 / 2  # Result is 3.5
   ```

   In this example, `7` divided by `2` results in `3.5`, which is a floating-point number.

2. **`//` (Floor Division Operator):** This operator performs floor division and returns an integer result. It gives you the quotient as an integer, discarding any decimal places.

   ```python
   result = 7 // 2  # Result is 3
   ```

   In this example, `7` floor divided by `2` results in `3`, which is an integer.

So, the key difference is that `/` gives you a floating-point result, while `//` gives you an integer result by performing floor division. 
    Depending on your needs, you can choose the appropriate division operator to get the desired result type.

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
Ans. output = "iNeuron" * 4
     print(output)
     iNeuroniNeuroniNeuroniNeuron
Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
Ans.# Take a number as input from the user
    user_input = input("Enter a number: ")
    # Convert the input to an integer
    number = int(user_input)
    # Check if the number is odd or even
    if number % 2 == 0:
    print(number, "is even.")
    else:
    print(number, "is odd.")
Q18.What are boolean operator?
Ans.Boolean operators, also known as logical operators, are special operators in programming that work with boolean values (True or False). 
    They include `and`, `or`, and `not`, and are used to perform logical operations like combining conditions or negating them.
    result = True and True  # Result is True
    result = True or False  # Result is True
    result = not True  # Result is False
Q19.What will the output of the following?
    1 or 0

    0 and 0

    True and False and True

    1 or 0 or 0
Ans.Let's evaluate each of the given expressions:

1. `1 or 0`: This is an example of the `or` operator. It returns the first `True` value it encounters or the last value if none are `True`. In this case, `1` is `True`, so the result is `1`.

2. `0 and 0`: This is an example of the `and` operator. It returns the first `False` value it encounters or the last value if none are `False`. In this case, both values are `False`, so the result is `0`.

3. `True and False and True`: This is a combination of `and` operators. It evaluates from left to right and returns the first `False` value it encounters or the last value if all are `True`. In this case, the first `False` encountered is `False`, so the result is `False`.

4. `1 or 0 or 0`: This is a combination of `or` operators. It evaluates from left to right and returns the first `True` value it encounters or the last value if none are `True`. In this case, the first `True` encountered is `1`, so the result is `1`.

So, the results are as follows:
1. `1`
2. `0`
3. `False`
4. `1`
Q20. What are conditional statements in Python?
Q21. What is use of 'if', 'elif' and 'else' keywords?
Ans.**Conditional statements** in Python are used to execute specific blocks of code based on certain conditions. Here are examples of conditional statements:

1. **`if` Statement:**
   ```python
   age = 20
   if age >= 18:
       print("You are an adult.")
   ```

2. **`if-else` Statement:**
   ```python
   temperature = 25
   if temperature > 30:
       print("It's hot outside.")
   else:
       print("It's not too hot.")
   ```

3. **`if-elif-else` Statement:**
   ```python
   score = 75
   if score >= 90:
       print("You got an A.")
   elif score >= 80:
       print("You got a B.")
   else:
       print("You got a C or lower.")
   ```

4. **`while` Loop with Conditional:**
   ```python
   count = 0
   while count < 5:
       print("Count:", count)
       count += 1
   ```

5. **`for` Loop with Conditional:**
   ```python
   fruits = ['apple', 'banana', 'cherry']
   for fruit in fruits:
       if fruit == 'banana':
           print("I found a banana!")
   ```

These conditional statements allow you to create flexible programs that respond to different situations or input values.
Q22.Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
Ans.# Take the age as input from the user
    age = int(input("Enter your age: "))
    # Check if the age is greater than or equal to 18
    if age >= 18:
    print("I can vote.")
    else:
    print("I can't vote.")
Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
Ans.numbers = [12, 75, 150, 180, 145, 525, 50]
    # Initialize a variable to store the sum
    even_sum = 0
    # Iterate through the list
    for number in numbers:
    # Check if the number is even
    if number % 2 == 0:
        even_sum += number
    # Display the sum of even numbers
    print("Sum of even numbers:", even_sum)
Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
Ans.# Take three numbers as input from the user
    num1 = float(input("Enter the first number: "))
    num2 = float(input("Enter the second number: "))
    num3 = float(input("Enter the third number: "))

    # Compare the numbers to find the greatest one
    if num1 >= num2 and num1 >= num3:
    greatest = num1
    elif num2 >= num1 and num2 >= num3:
    greatest = num2
    else:
    greatest = num3

    # Display the greatest number
    print("The greatest number is:", greatest)
Q25. Write a program to display only those numbers from a list that satisfy the following conditions

   - The number must be divisible by five

   - If the number is greater than 150, then skip it and move to the next number

   If the number is greater than 500, then stop the loop
   ```
   numbers = [12, 75, 150, 180, 145, 525, 50]
Ans.numbers = [12, 75, 150, 180, 145, 525, 50]

   # Iterate through the list
   for number in numbers:
    # Check if the number is divisible by 5
    if number % 5 == 0:
        # Check if the number is greater than 150
        if number > 150:
            # Skip numbers greater than 150
            continue
        
        # Check if the number is greater than 500
        if number > 500:
            # Stop the loop if the number is greater than 500
            break
        
        # Display the number
        print(number)

